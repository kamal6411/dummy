#CREATE DATABASE VENUS;
CREATE TABLE RAW_MATERIALS (MATERIAL_ID INT PRIMARY KEY,NAME VARCHAR(20),QUANTITY INT, SUPPLIER_ID VARCHAR(20));
INSERT INTO RAW_MATERIALS VALUES(1,'Paracetamol',500,'S101'),(2,'Ibuprofen',300,'S102'),(3,'Amoxicillin',200,'S103');

CREATE TABLE PRODUCTION_BATCHS (BATCH_ID INT PRIMARY KEY,PRODUCT_ID INT, START_DATE DATE, END_DATE DATE, QA_STATUS VARCHAR(20));
INSERT INTO PRODUCTION_BATCHS VALUES (1001,201,'2024-12-01','2024-12-05','Passed'),(1002,202,'2024-12-03','2024-12-07','Failed'),
(1003,203,'2024-12-04','2024-12-09','In-Progress');

CREATE TABLE QUALITY_TESTS (TEST_ID INT PRIMARY KEY, BATCH_ID INT, PARAMETER VARCHAR(20), RESULT VARCHAR(20), DATE DATE, 
FOREIGN KEY(BATCH_ID) REFERENCES PRODUCTION_BATCHS(BATCH_ID));
INSERT INTO QUALITY_TESTS VALUES(1,1001,'Potency','Passed','2024-12-06'),(2,1002,'Stability','Failed','2024-12-08'),
(3,1001,'Microbial Test','Passed','2024-12-06');

CREATE TABLE EMPLOYEES (EMPLOYEE_ID VARCHAR(20) PRIMARY KEY, NAME VARCHAR(20), ROLE VARCHAR(20), DEPARTMENT_ID VARCHAR(20), ATTENDENCE VARCHAR(20));
INSERT INTO EMPLOYEES VALUES('E001','John Smith','Quality Analyst','D101','Present'),('E002','Alice Brown','Production Manager','D102','Absent'),
('E003','Rajesh Kumar','HR Manager','D103','Present');

CREATE TABLE ORDERS(ORDER_ID VARCHAR(20),CUSTOMER_ID VARCHAR(20),PRODUCT_ID INT, QUANTITY INT, DISPATCH_DATE DATE,PRIMARY KEY(ORDER_ID));
INSERT INTO ORDERS VALUES('O001','C001',201,50,'2024-12-07'),('O002','COO2',202,100,'2024-12-08'),('O003','C002',203,200,'2024-12-09');

INSERT INTO RAW_MATERIALS VALUES(4,'Diclofenac',350,'S104'),(5,'Amikacin Sulphate',280,'S102'),(6,'Cefepime',408,'S104'),(7,'Doxycycline',328,'S106'),
(8,'Vancomycin',140,'S105');
ALTER TABLE RAW_MATERIALS ADD COLUMN PRICE INT AFTER QUANTITY ;
UPDATE RAW_MATERIALS SET PRICE=240 WHERE MATERIAL_ID=1;
UPDATE RAW_MATERIALS SET PRICE=130 WHERE MATERIAL_ID=2;
UPDATE RAW_MATERIALS SET PRICE=300 WHERE MATERIAL_ID=3;
UPDATE RAW_MATERIALS SET PRICE=500 WHERE MATERIAL_ID=4;
UPDATE RAW_MATERIALS SET PRICE=250 WHERE MATERIAL_ID=5;
UPDATE RAW_MATERIALS SET PRICE=370 WHERE MATERIAL_ID=6;
UPDATE RAW_MATERIALS SET PRICE=400 WHERE MATERIAL_ID=7;
UPDATE RAW_MATERIALS SET PRICE=340 WHERE MATERIAL_ID=8;




# 1. stored procedures 
delimiter //
CREATE PROCEDURE RECONCILE_STOCK()
begin 
SELECT NAME,QUANTITY FROM RAW_MATERIALS;    #  GETTING PRODUCT NAME AND AVAILABLE QUANTITY 
SELECT A.NAME FROM RAW_MATERIALS AS A WHERE EXISTS (SELECT * FROM ORDERS WHERE QUANTITY<=A.QUANTITY ); # CHECKING ORDERED QUANTITY IS AVAILABLE AT WAREHOUSE OT NOT.
SELECT NAME FROM RAW_MATERIALS WHERE QUANTITY<300;  # GETTING PRODUCT THAT HAS NEED TO BE ORDER MORE.(LIMITED STOCK)
SELECT A.NAME,A.QUANTITY FROM RAW_MATERIALS AS A  WHERE QUANTITY>180 AND QUANTITY<280;

END//
DELIMITER ;
# CALLING THE PROCEDURE
CALL RECONCILE_STOCK();

# 2. STORED PROCEDURE
DELIMITER $$
CREATE PROCEDURE GENERATING_QA_REPORT()
BEGIN



END $$
DELIMITER ;
# calling procedure
CALL GENERATING_QA_REPORT

# TRIGGER
#  Before Update Trigger: Ensure no stock falls below a minimum threshold without alerting the admin.
DELIMITER $$
CREATE TRIGGER CHECK_STOCK_BEFORE_UPDATE
BEFORE UPDATE ON RAW_MATERIALS 
FOR EACH ROW
BEGIN
DECLARE MIN_STOCK INT DEFAULT 50;
IF NEW.QUANTITY<MIN_STOCK THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT='Stock Level should not below the mimimum threshold of 50. Please review the update.';
END IF;
END $$
DELIMITER ;
UPDATE ORDERS SET QUANTITY=40 WHERE ORDER_ID='O001';


#Triggers:
CREATE TABLE DispatchQueue (
    dispatch_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    status VARCHAR(50) DEFAULT 'Pending',
    dispatch_date DATETIME
);
DELIMITER $
CREATE TRIGGER AFTER_ORDER_INSERT
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN 
INSERT INTO DISPATCHQUEUE(ORDER_ID,DISPATCH_DATE) VALUES(NEW.ORDER_ID,NOW());
END $
DELIMITER $
INSERT INTO ORDERS VALUES('O006','C104',204,14,NOW());
INSERT INTO ORDERS VALUES('O008','C107',205,7,NOW());
# DROP TRIGGER AFTER_ORDER_INSERT;




